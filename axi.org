#+TITLE: Snickerdoodle AXI notes

* References:

** FPGA Developer

The FPGA Developer tutorials start with this base system, based on the MicroZed board.
http://www.fpgadeveloper.com/2014/07/creating-a-base-system-for-the-zynq-in-vivado.html

Then proceed to this axi loopback tutorial.
http://www.fpgadeveloper.com/2014/08/using-the-axi-dma-in-vivado.html

These tutorials are based on a 2014 Vivado toolset. Published on github are newer code versions and instructions for:
 - zeboard https://github.com/fpgadeveloper/zedboard-axi-dma
 - microzed https://github.com/fpgadeveloper/microzed-axi-dma

A previous version of the lookback tutorial using EDK instead of Vivado is here:
http://www.fpgadeveloper.com/2014/03/using-the-axi-dma-engine.html 
and it relied upon the Base System Builder
http://www.fpgadeveloper.com/2014/02/creating-a-project-using-the-base-system-builder-2.html

* Set up

Using a snickerdoodle black v4.1 with Vivado 2018.2

* create the base system using vivado

Even through the tutorial was based on the microzed board, it worked fine with the snickerdoodle black board using the basic hardware setup developed in [[file:blink.org]].

With the snickerdoodle board, programming the FPGA using the Diligent JTAG cable causes the white led heartbeat light to start up. Then connect via screen
#+begin_src
screen /dev/ttyACM0 115200
#+end_src
and every time the "Run->Run As->Run on hardware" is selected in the SDK, the board will respond with "Hello World"

* create AXI DMA

** Vivado

This [[http://www.fpgadeveloper.com/2014/08/using-the-axi-dma-in-vivado.html][tutorial]] relies on the base system developed earlier.

Worked through this demo up to the SDK portion. There are a series of problems related to finding the correct header files for compilation. This is probably related to the age of the vivado toolset used in the tutorial (2014), where as I'm using 2018.2. There are newer source code bases published on github for the [[https://github.com/fpgadeveloper/microzed-axi-dma][microzed]] and [[https://github.com/fpgadeveloper/zedboard-axi-dma][zedboards]].

The newer tutorials specifically say not to start the SDK from within Vivado.

I'm going to modify one of the newer tutorials for the snickerdoodle board. I cloned both the microzed and zedboard repos from FPGA developer so that I could investigate the differences in the scripts.

To modify the build.tcl script, We need to know two things, the part name for the Zynq part and the board name. I got the board descriptions earlier and installed them into Vivado.

The snickerdoodle board files can be found in this repository https://github.com:krtkl/snickerdoodle-board-files.git. Clone the repo and copy the board file directories into something like /usr/local/xilinx/Vivado/2018.2/data/boards/board_files/. I'm using a snickerdoodle black. The file board.xml has the the part_name information: 
#+begin_src
part_name="xc7z020clg400-3"
#+end_src

Finding the board_part name was trickier. I grepped through an earlier tutorial project and found it as: 
#+begin_src
set_property -name "board_part" -value "krtkl.com:snickerdoodle_black:part0:1.0" -objects $obj
#+end_src

Several changes had to be made. I modified the microzed project in a fork with a snickerdoodle-branch here at https://github.com/anielsen001/microzed-axi-dma

** XSDK

Created a build-sdk.sh script for liux.

Board files need to be copied into the SDK/data/boards/board_files directory, as for Vivado.

The environment can be cleared by
#+begin_src
rm .metadata snickerdoodle_black_axi_dma_wrapper_hw_platform_0/ snickerdoodle_black_test_app/ snickerdoodle_black_test_app_bsp/
#+end_src


#  LocalWords:  snickerdoodle Vivado
