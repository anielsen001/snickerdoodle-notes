#+TITLE: create blink project

* blink ip 

here's a second tutorial on the zynq clocks
https://numato.com/kb/styx-use-xilinx-zynq-ps-pll-clocks-fpga-fabric/

Create the VHDL code to blink the LED. Here's an example:
http://www.craftdrones.com/blog/august-22nd-2017

It should aim to blink at a 1 Hz rate. The snickerdoodle clock appears to be 50 MHz
https://groups.google.com/forum/#!topic/krtkl-snickerdoodle/kD9G4dZh_Mg
and the counter goes to 25M

What voltage to expect on the output pin? The voltage is configurable using pin 3 to set the reference voltage. The reference voltage range can be between 1.2 and 3.3 Volts. See the [[https://krtkl.com/resources/faqs/][faq]], here's the quote:

#+begin_quote
The voltage levels for the FPGA I/O pins (JA1, JA2, JB1, JB2, JC1) are settable to between 1.2V and 3.3V.

snickerdoodle one has two independent “banks” of 50 FPGA I/O pins (JAx and JBx); each can be set to any I/O voltage in the aforementioned range. snickerdoodle black adds a third independent FPGA I/O bank of 25 I/O pins (JC1).

A 3.3V power supply output is supplied on each FPGA I/O connector, which can be used with a single jumper to set the I/O voltage to 3.3V for that bank without any additional external components. However, to use an I/O voltage other than 3.3V (1.2V to < 3.3V), that voltage must be supplied to the I/O bank. The microprocessor I/O (J3) have a fixed voltage of 1.8V. Note: this is required to support Ethernet on the baseboards, as RGMII does not support I/O voltages above 2.5V. The analog, audio, JTAG etc. I/O on J2 all have a fixed I/O voltage of 3.3V.
#+end_quote

My board came with a jumper connecting pins 1 and 3 on JA1, JB1 and JC1. I expect the voltage to be 3.3V on the output pins. Verified the voltage with a multimeter. This voltage appears when the snickerdoodle is powered up, it does not need to be booted to see the reference voltage.


* using vivado to create bitstream

see: http://www.craftdrones.com/blog/create-snickerdoodle-blink-project as an example.

I have board rev4 and the tutorial is board rev3. 
I'm using vivado 2018.3, the tutorial is 2017.2

When I get to the "Run Block Automation" part of the tutorial, I end up with a different result. The screen looks just like the tutorial before I run block automation, and after, it does not look the same as the tutorial. It looks like
[[file:img/vivado_after_run_build_automation.png]]

At this point, try to follow the craftdrones tutorial as best as possible. Hook up FCLK_CLK0 to M_AXI_GP0_ACLK. 

After adding the blink IP, connect CLK to FCLK_CLK0 and reset_n to FCLK_RESET0_N

At the validation step, I get this error:
[[file:img/not_connected_error.png]]
"The following clock pins are not connected to a valid clock source:
/processing_system_7_0/S_AXI_ACP_ACLK"

Now I'm stuck and cannot continue.

I was able to make the error go away by double clicking on the "ZYNQ7 Processing System" modules in the diagram. Selecting "PS-PL Configuration" expanding the "ACP Slave AXI Interface" and unchecking "S AXI ACP interface"
[[file:img/s_axi_acp_interface_tick_off.png]]
Click the "OK" button,  revalidate the design (F6) and the errors clear. The diagram now looks like this:
[[file:img/diagram_after_fix.png]]

When I get to adding constraints, the tutorial references a krtkl git repo 
https://github.com/krtkl/snickerdoodle-examples
which I cloned. This repo has been reorganized since the tutorial was created. All of the constraints files in the examples repo differ from the tutorial with diff, but this is not too important for this example. 

The tutorial references the snickerdoodle book, but the link no longer exists. I found a copy here:
https://cdn.hackaday.io/files/7799333672416/snickerdoodle-book.pdf
It would appear that the snickerdoodle manual replaces much of this:
https://github.com/krtkl/snickerdoodle-manual

Generate the bitstream. This will take some time.

After bitstream generation is complete, this window should appear:
[[file:img/bitstream_generation_complete.png]]

Selecting "View Reports" and "OK" will return to vivado with a reports tab in the bottom pane. Double clicking on any of those lines will open a report tab in the top right pane with the contents of that report. Some of the reports are greyed out and cannot be clicked on.
[[file:img/vivado_view_reports.png]]

Next, find the bitstream file. 
#+begin_src
apn@aria:~/proj/snickerdoodle$ find . -name "*.bit"
./blinky2/blinky2.runs/impl_1/design_1_wrapper.bit
#+end_src

* load bitstream to snickerdoodle

And, flash it to the snickerdoodle. There are several ways

** JTAG cable

I have the breakyBreaky board so I should be able to do this, but I don't have the JTAG cable. 

http://www.craftdrones.com/blog/program-snickerdoodle-via-jtag

** load from SD-card boot partition

On the boot partition of the [[file:sd-card.org][SD card]] you can put the bitstream into a file called system.bit. Then boot the snickerdoodle with the SD-Card. You must do 
#+begin_src
snickerdoodle> boot
#+end_src
to get the bitstream to load. If the bitstream loads to the Zynq FPGA there will be a white LED on the board that flases short-long fade in to indicate that the bitstream loaded.

craftdrones tutorial explains:
[[http://www.craftdrones.com/blog/august-22nd-20178830744][setup snickerdoodle sd card]]

Currently stuck, the bitstream loads, white LED flashes, and there is nothing on the output pin when connected to an LED nor when connected directly to a scope probe. Need to work back and find the error.


** load from linux

Figure out how to get the .bit converted to a .bit.bin 

There is some discussion here about converting .bit to .bin
https://www.linuxsecrets.com/xilinx/Solution+ZynqMP+PL+Programming.html

This https://lists.yoctoproject.org/pipermail/meta-xilinx/2015-December/001346.html refers to a github repo with a python script that can do the conversion https://github.com/topic-embedded-products/meta-topic/blob/master/recipes-bsp/fpga/fpga-bit-to-bin/fpga-bit-to-bin.py

Some comments on the krtkl forums https://krtkl.com/resources/forums/topic/xdevcfg/ which refer to this page https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841645/Solution+Zynq+PL+Programming+With+FPGA+Manager which seems to be the same as the linuxsecrets link above.

The xilinx bootgen utility ships as part of the SDK. It can be found under
#+begin_src
/usr/local/xilinx/SDK/2018.3/bin/bootgen
#+end_src
in my install. put it on the path
#+begin_src
export PATH=$PATH:/usr/local/xilinx/SDK/2018.3/bin
#+end_src

Loosely following the xilinx wiki. Before running bootgen, you have to create a .bif file which contains
#+BEGIN_SRC
all:
{
        design_1_wrapper.bit /* Bitstream file name */
}
#+END_src

Made a backup of the bitstream file
#+begin_src
apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ cp design_1_wrapper.bit  design_1_wrapper.bit.keep
#+end_src

Then run:
#+BEGIN_SRC
apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ bootgen -image Full_Bitstream.bif -arch zynq -process_bitstream bin


****** Xilinx Bootgen v2018.3
  **** Build date : Dec  6 2018-23:41:49
    ** Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.

apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ 
#+end_src

And the .bin file was created
#+begin_src
apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ ls *bit*
design_1_wrapper.bit  design_1_wrapper.bit.bin  design_1_wrapper.bit.keep  write_bitstream.pb
#+end_src

* moving on



Moving on to the http://www.craftdrones.com/blog/snickerdoodle-scripting-part-1 page, I'm greeted with Chrome's Dangerous warning about malware infecting the page. <2019-02-10 Sun>
Fortunately, I found a copy of the page with the way-back machine
https://web.archive.org/web/20180528163631/http://www.craftdrones.com/blog/snickerdoodle-scripting-part-1
and the way-back machine has the craftdrones archive here. 
https://web.archive.org/web/*/http://www.craftdrones.com/*
This archive is not 100% complete.


#  LocalWords:  bitstream vivado snickerdoodle krtkl xilinx
