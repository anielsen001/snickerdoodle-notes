#+TITLE: create blink project

* References

This seems to supercede the craftdrones tutorial:
http://www.ritravvenlab.com/cpet-563.html
https://github.com/ritravvenlab

Craft Drones tutorial: create the VHDL code to blink the LED. Here's an example:
http://www.craftdrones.com/blog/august-22nd-2017

https://krtkl.com/resources/forums/topic/test-pl-reconfiguration-using-sysfs-bin-vs-u-boot-system-bit/

another example
https://github.com/mng2/snickerdoodle-hello-world

here's a second tutorial on the zynq clocks
https://numato.com/kb/styx-use-xilinx-zynq-ps-pll-clocks-fpga-fabric/


* blink details

It should aim to blink at a 1 Hz rate. The snickerdoodle clock appears to be 50 MHz https://groups.google.com/forum/#!topic/krtkl-snickerdoodle/kD9G4dZh_Mg
and the counter goes to 25M. You can find the clock frequency in the FCLK_CLK by double-clicking on the Zynq IP in the vivado display and selecting "Clock Configuration" 
[[file:img/vivado_recustomize_fclk_setting.png]]

What voltage to expect on the output pin? The voltage is configurable using pin 3 to set the reference voltage. The reference voltage range can be between 1.2 and 3.3 Volts. See the [[https://krtkl.com/resources/faqs/][faq]], here's the quote:

#+begin_quote
The voltage levels for the FPGA I/O pins (JA1, JA2, JB1, JB2, JC1) are settable to between 1.2V and 3.3V.

snickerdoodle one has two independent “banks” of 50 FPGA I/O pins (JAx and JBx); each can be set to any I/O voltage in the aforementioned range. snickerdoodle black adds a third independent FPGA I/O bank of 25 I/O pins (JC1).

A 3.3V power supply output is supplied on each FPGA I/O connector, which can be used with a single jumper to set the I/O voltage to 3.3V for that bank without any additional external components. However, to use an I/O voltage other than 3.3V (1.2V to < 3.3V), that voltage must be supplied to the I/O bank. The microprocessor I/O (J3) have a fixed voltage of 1.8V. Note: this is required to support Ethernet on the baseboards, as RGMII does not support I/O voltages above 2.5V. The analog, audio, JTAG etc. I/O on J2 all have a fixed I/O voltage of 3.3V.
#+end_quote

My board came with a jumper connecting pins 1 and 3 on JA1, JB1 and JC1. I expect the voltage to be 3.3V on the output pins. Verified the voltage with a multimeter. This voltage appears when the snickerdoodle is powered up, it does not need to be booted to see the reference voltage.


* using vivado to create bitstream

see: http://www.craftdrones.com/blog/create-snickerdoodle-blink-project as an example. There is a newer tutorial by the same author that shows a demo with a more recent vivado. http://www.ritravvenlab.com/cpet-563-blog/february-03rd-2019 however it's missing some of the commentary that the original included. 

This table summarizes to the best of my knowledge the differences between my setup and the various tutorial/demo pages.
|                | Vivado | Board Rev  | breakyBreaky Rev |
|----------------+--------+------------+------------------|
| Mine           | 2018.3 | black 4.11 |              4.0 |
| craftdrones    | 2017.2 | black? 3   |                3 |
| RIT ravven lab | 2018.2 | black?     |                ? |


** Start up Vivado

The Vivado 2018.3 on Ubuntu 16.04 start screen looks like 
[[file:img/vivado_start_screen.png]]

** Create Project

In the quick start section, click of "Create Project >" and the New Project Screen appears. I filled it in as shown. With the "create project subdirectory" box checked, Vivado will create the blink3 subdirectory under the project location.
[[file:img/vivado_create_new_project.png]]

Click "Next" and the "Project Type" screen appears. Select "RTL Project" radio button, then click "Next".
[[file:img/vivado_new_project_project_type.png]]

This brings up the "New Project Add Sources" window, click "Next"
[[file:img/vivado_new_project_add_sources.png]]

This brings up the "New Project Add Constraints" window, click "Next"
[[file:img/vivado_new_project_add_constraints.png]]

This brings up the "New Project Default Part" window. There are two tabs, "Parts" and "Boards".  Select "Boards" and then I select the "snickerdoodle Black Development Platform" because that's what I have. The screenshot is expanded to show the most relevant information about the board rev number (4 in this case) and file version (1.0 in this case). Click "Next".
[[file:img/vivado_new_project_default_part.png]]

This brings up the "New Project Summary" window. Which looks OK. This is a departure from the Craft Drones tutorial which chooses the snickerdoodle Dev platform although there is some inconsistency about which board the Craft Drones tutorial is targeting later on. I'm using a Black so I chose this option. Review this and click "Finish".
[[file:img/vivado_new_project_summary.png]]

** Design project

The Vivado IDE now appears and looks like this
[[file:img/vivado_ide_initial_display.png]]

*** Create Block Diagram

The next step is to crate a block diagram. This can be done in the IDE. On the left panel called "Flow Navigator" there is a section called "IP INTEGRATOR" with a sub-section called "Create Block Design" select it and the "Create Block Design" window appears. I don't change anything, and click OK.
[[file:img/vivado_create_block_design.png]]

A progress bar will appear and then the IDE will update to show the "BLOCK DESIGN" display
[[file:img/vivado_ide_block_design.png]]

*** Add Parts

Now we need to add parts. First add the Zynq processor. Click on the "+" and a search box appears. Search for Zynq. I had only one option and picked it. The IDE updates with a block diagram of the Zynq.
[[file:img/vivado_block_design_add_zynq.png]]

There is a green bar in the Diagram window that has a "Run Block Automation" link. Selecting this link will cause Vivado to link the Zynq processor up to components specific to our board (snickerdoodle black in this case). Selecting the link brings up the "Run Block Automation" screen. I don't change anything here, click "OK" and a progress bar appears.
[[file:img/vivado_run_block_automation.png]]

The "Run Block Automation" window warns that doing this cannot be undone. I know that I've differed from the Craft Drones tutorial by selecting a snickerdoodle black board. I don't know if this is the difference or not.

After running the "Run Block Automation" part of the tutorial, I end up with a different result. The screen looks just like the craftdrones tutorial before I run block automation, and after, it does not look the same as the tutorial. It looks like
[[file:img/vivado_after_run_build_automation.png]]

I did investigate starting from scratch and using the generic snickerdoodle Development Platform at the "New Project Default Part" stage, but ended up with the same result after running build automation. So, I'll stick with the black board. I'll have to research what the extra connections are in my setup.

I found some comments in a forum that the Vivado version might matter, so I installed Vivado 2017.2, the version from the tutorial and got the same results.

The ritravvenlab tutorial does show the same result I have. However, they solve the S_AXI_ACP_ACLK issue differently, the connect it to the M_AXI_GP0_ACLK. So I tried this again in a completely fresh vivado project, following their pinout selection and constraints file. No dice. I get nothing on the new pin, JA1.7.  When I follow the RIT instructions I do get a warning
[[file:img/vivado_run_automation_warning.png]] They don't show the console, so I don't know if they get this warning or not.

I tried something simpler, toggling the GPIO pins from linux, [[file:gpio-toggle.org]]. This worked, which so far is the only thing that's gone smoothly with this board.

*** TODO research the Zynq 7 connections.

*** Make connections

At this point, try to follow the craftdrones tutorial as best as possible. Hook up FCLK_CLK0 to M_AXI_GP0_ACLK. 

After adding the blink IP, connect CLK to FCLK_CLK0 and reset_n to FCLK_RESET0_N

At the validation step, I get this error:
[[file:img/not_connected_error.png]]
"The following clock pins are not connected to a valid clock source:
/processing_system_7_0/S_AXI_ACP_ACLK"

Now I'm stuck and cannot continue.

I was able to make the error go away by double clicking on the "ZYNQ7 Processing System" module in the diagram to bring up the "Re-customize IP" window. Selecting "PS-PL Configuration" expanding the "ACP Slave AXI Interface" and unchecking "S AXI ACP interface"
[[file:img/s_axi_acp_interface_tick_off.png]]
Click the "OK" button,  revalidate the design (F6) and the errors clear. The diagram now looks like this:
[[file:img/diagram_after_fix.png]]

** Add constraints

When I get to adding constraints, the tutorial references a krtkl git repo 
https://github.com/krtkl/snickerdoodle-examples
which I cloned. This repo has been reorganized since the tutorial was created. All of the constraints files in the examples repo differ from the tutorial with diff, but this is not too important for this example. 

The tutorial references the snickerdoodle book, but the link no longer exists. I found a copy here:
https://cdn.hackaday.io/files/7799333672416/snickerdoodle-book.pdf
It would appear that the snickerdoodle manual replaces much of this:
https://github.com/krtkl/snickerdoodle-manual

** Generate the bitstream. 

This will take some time.

After bitstream generation is complete, this window should appear:
[[file:img/bitstream_generation_complete.png]]

Selecting "View Reports" and "OK" will return to vivado with a reports tab in the bottom pane. Double clicking on any of those lines will open a report tab in the top right pane with the contents of that report. Some of the reports are greyed out and cannot be clicked on.
[[file:img/vivado_view_reports.png]]

I found that there were some warnings after creating the bitstream, namely
#+begin_quote
[Designutils 20-3303] unexpected site type 'IOPAD' in HDPYFinalizeIO
#+end_quote
This Xilinx forum https://forums.xilinx.com/t5/Implementation/unexpected-site-type-IOPAD-in-HDPYFinalizeIO/td-p/923303 indicates that these are a known issue and will be fixed in a future version, so I'm ignoring these.

Next, find the bitstream file. 
#+begin_src
apn@aria:~/proj/snickerdoodle$ find . -name "*.bit"
./blinky2/blinky2.runs/impl_1/design_1_wrapper.bit
#+end_src

* load bitstream to snickerdoodle

And, flash it to the snickerdoodle. There are several ways

** JTAG cable

I have the breakyBreaky board so I should be able to do this, but I don't have the JTAG cable. 

http://www.craftdrones.com/blog/program-snickerdoodle-via-jtag

** load from SD-card boot partition

On the boot partition of the [[file:sd-card.org][SD card]] you can put the bitstream into a file called system.bit. Then boot the snickerdoodle with the SD-Card. You must do 
#+begin_src
snickerdoodle> boot
#+end_src
to get the bitstream to load. If the bitstream loads to the Zynq FPGA there will be a white LED on the board that flashes short-long fade in to indicate that the bitstream loaded.

craftdrones tutorial explains:
[[http://www.craftdrones.com/blog/august-22nd-20178830744][setup snickerdoodle sd card]]

Currently stuck, the bitstream loads, white LED flashes, and there is nothing on the output pin when connected to an LED nor when connected directly to a scope probe. Need to work back and find the error.

There's a related issue in the krtkl forum https://krtkl.com/resources/forums/topic/trouble-programming-pl-over-jtag-in-vivado-running-ubuntu/ but I think I've already taken care of this.

** load from linux

Figure out how to get the .bit converted to a .bit.bin 

There is some discussion here about converting .bit to .bin
https://www.linuxsecrets.com/xilinx/Solution+ZynqMP+PL+Programming.html

This https://lists.yoctoproject.org/pipermail/meta-xilinx/2015-December/001346.html refers to a github repo with a python script that can do the conversion https://github.com/topic-embedded-products/meta-topic/blob/master/recipes-bsp/fpga/fpga-bit-to-bin/fpga-bit-to-bin.py

Some comments on the krtkl forums https://krtkl.com/resources/forums/topic/xdevcfg/ which refer to this page https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841645/Solution+Zynq+PL+Programming+With+FPGA+Manager which seems to be the same as the linuxsecrets link above.

The xilinx bootgen utility ships as part of the SDK. It can be found under
#+begin_src
/usr/local/xilinx/SDK/2018.3/bin/bootgen
#+end_src
in my install. put it on the path
#+begin_src
export PATH=$PATH:/usr/local/xilinx/SDK/2018.3/bin
#+end_src

Loosely following the xilinx wiki. Before running bootgen, you have to create a .bif file which contains
#+BEGIN_SRC
all:
{
        design_1_wrapper.bit /* Bitstream file name */
}
#+END_src

Made a backup of the bitstream file
#+begin_src
apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ cp design_1_wrapper.bit  design_1_wrapper.bit.keep
#+end_src

Then run:
#+BEGIN_SRC
apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ bootgen -image Full_Bitstream.bif -arch zynq -process_bitstream bin


****** Xilinx Bootgen v2018.3
  **** Build date : Dec  6 2018-23:41:49
    ** Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.

apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ 
#+end_src

And the .bin file was created
#+begin_src
apn@aria:~/proj/snickerdoodle/blinky2/blinky2.runs/impl_1$ ls *bit*
design_1_wrapper.bit  design_1_wrapper.bit.bin  design_1_wrapper.bit.keep  write_bitstream.pb
#+end_src

* moving on



Moving on to the http://www.craftdrones.com/blog/snickerdoodle-scripting-part-1 page, I'm greeted with Chrome's Dangerous warning about malware infecting the page. <2019-02-10 Sun>
Fortunately, I found a copy of the page with the way-back machine
https://web.archive.org/web/20180528163631/http://www.craftdrones.com/blog/snickerdoodle-scripting-part-1
and the way-back machine has the craftdrones archive here. 
https://web.archive.org/web/*/http://www.craftdrones.com/*
This archive is not 100% complete.


#  LocalWords:  bitstream vivado snickerdoodle krtkl xilinx
