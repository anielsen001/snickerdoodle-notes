#+TITLE: Version Control with Vivado

Would like to manage custom IP separately from the application. This seems trickier so I'll do that later.

TODO later: There are two pieces:
 - creating custom IP to be used in projects
 - creating projects to control boards or systems

* References:

http://www.fpgadeveloper.com/2014/08/version-control-for-vivado-projects.html

http://www.fpgadeveloper.com/2014/08/creating-a-custom-ip-block-in-vivado.html

Using Vivado Design Suite with Version Control Systems
https://www.xilinx.com/support/documentation/application_notes/xapp1165.pdf

Xilinx packaging IP basics
https://www.xilinx.com/support/documentation/sw_manuals/xilinx2017_2/ug1118-vivado-creating-packaging-custom-ip.pdf

Creating custom IP
http://blog.dev-flow.com/en/12-creating-a-custom-ip-in-vivado/

Creating new Blink IP
http://www.ritravvenlab.com/cpet-563-blog/create-blink-ip

http://adiuvoengineering.com/maximising-reuse-in-your-vivado-design/

* Version control IP and Application together

This [[http://www.fpgadeveloper.com/2014/08/version-control-for-vivado-projects.html][FPGADeveloper]] tutorial has a good start. I'll walk through creating the [[http://www.ritravvenlab.com/cpet-563.html][RIT RAVVEN Lab]] [[http://www.ritravvenlab.com/cpet-563-blog/february-03rd-2019][Blink Project]] using something like this method.

Create a directory to maintain everything related to the project
#+begin_src sh
mkdir blink-04-01-01
#+end_src

Create a subdirectory for all vivado related things
#+begin_src sh
mkdir blink-04-01-01/vivado
#+end_src

Create IP subdirectories
#+begin_src sh
mkdir -p blink-04-01-01/vivado/ip/blink/src
#+end_src

Get the blink vhdl code and put in the just created src directory
#+begin_src sh
cd blink-04-01-01/vivado/ip/blink/src
wget https://raw.githubusercontent.com/anielsen001/ravven-vhdl/master/blinkWithATwist/ip/blink/src/blink.vhd
cd -
#+end_src

Create BD (block diagram) subdirectories
#+begin_src sh
mkdir -p blink-04-01-01/vivado/src/bd
#+end_src

Initialize a git repo in the blink-xxxx directory
#+begin_src sh
cd blink-04-01-01/
git init
#+end_src

Switch to the vivado directory and start vivado
#+begin_src sh
cd vivado
vivado
#+end_src

#+begin_src sh
#!/bin/bash

export DEMO_DIR=$HOME/proj/snickerdoodle/blink-demo-git-01

mkdir $DEMO_DIR
mkdir $DEMO_DIR/vivado
mkdir -p $DEMO_DIR/vivado/ip/blink/src

mkdir -p $DEMO_DIR/vivado/src/bd

cd $DEMO_DIR/vivado/ip/blink/src
wget https://raw.githubusercontent.com/anielsen001/ravven-vhdl/master/blinkWithATwist/ip/blink/src/blink.vhd

cd $DEMO_DIR
git init

cd vivado
# vivado

#+end_src

I'm going to create a project called "blink" under the vivado directory. This directory can be entirely deleted and regenerated with the build.tcl script that will be created. 

The first thing to be done is Package the blink IP. See http://www.ritravvenlab.com/cpet-563-blog/create-blink-ip for an example. 

Now you can add the following files to git and commit them:
#+begin_src sh
apn@aria:~/proj/snickerdoodle/blink-04-01-02/vivado/ip/blink$ tree
.
├── component.xml
├── src
│   └── blink.vhd
└── xgui
    └── blink_v1_0.tcl

2 directories, 3 files
#+end_src 

#+begin_src sh
apn@aria:~/proj/snickerdoodle/blink-demo-git-01/vivado$ git add ip/blink/component.xml ip/blink/src/blink.vhd ip/blink/xgui/blink_v1_0.tcl 
#+end_src

Next, close this project and see this http://www.ritravvenlab.com/cpet-563-blog/february-03rd-2019 to create the project and add the IP you just created. Under "project manager -> settings" is an option to add new IP.

Create the block diagram as in  http://www.ritravvenlab.com/cpet-563-blog/february-03rd-2019 and save the project. To achieve the correct directory structure, set the project name as "blink" and the project location to $DEMO_DIR/vivado. This will create a project directory called $DEMO_DIR/vivado/blink.

To add the blink IP goto "Settings -> IP -> Repository" and select $DEMO_DIR/vivado/ip

When creating the constraints file, use
#+begin_src
### JA1.4 (IO_0_35)
set_property PACKAGE_PIN    G14         [get_ports led]
set_property IOSTANDARD     LVCMOS33    [get_ports led]
#+end_src

Create the block diagram tcl script from "File -> Export -> Export Block Design..." and save this tcl script in vivado/src/bd/design_1.tcl and add this to git. This can also be done with a tcl command
#+begin_src tcl
write_bd_tcl <filename>
#+end_src
e.g.:
#+begin_src tcl
write_bd_tcl /home/apn/proj/snickerdoodle/blink-demo-git-02/vivado/src/bd/design_1.tcl
#+end_src

Then select "File -> Project -> Write Tcl..." and save the file under the vivado directory as build.tcl. This is equivalent to the tcl command write_project_tcl, using the defaults, it's this command:
#+write_src tcl
write_project_tcl -use_bd_files {/home/apn/proj/snickerdoodle/blink-demo-git-02/vivado/build2.tcl}
#+end_src 



Edit the build.tcl script. Look for these lines, they are around line 160 in my build.tcl. Comment these out, the design_1.bd file will be created by the design_1.tcl script we added.
#+begin_src tcl
# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/blink/blink.srcs/sources_1/bd/design_1/design_1.bd" ]\
 [file normalize "${origin_dir}/../../blink.srcs/sources_1/bd/design_1/hdl/design_1_wrapper.vhd" ]\
]
set imported_files [import_files -fileset sources_1 $files]
#+end_src

Add these lines just before them
#+begin_src tcl
####################    APN
# Create block design
source $origin_dir/src/bd/design_1.tcl

# Generate the wrapper
set design_name [get_bd_designs]
make_wrapper -files [get_files $design_name.bd] -top -import
####################    APN
#+end_src

Need to edit build.tcl to handle constraints file. Around line 191 in the file I have, see these lines
#+begin_src tcl
# Add/Import constrs file and set constrs file properties
set file "[file normalize ${origin_dir}/blink/blink.srcs/constrs_1/imports/constraints/constraints.xdc]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "constraints/constraints.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj
#+end_src
Modify them to be:
#+begin_src tcl
############### APN - edit to use repo constraints file
# Add/Import constrs file and set constrs file properties
# set file "[file normalize ${origin_dir}/blink/blink.srcs/constrs_1/imports/constraints/constraints.xdc]"
set file "[file normalize ${origin_dir}/src/constraints/constraints.xdc]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "constraints/constraints.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj
############### APN
#+end_src


Add and commit build.tcl to git.

After committing everything, the repo looks like this:
#+begin_src sh
apn@aria:~/proj/snickerdoodle/blink-demo-git-04$ tree
.
└── vivado
    ├── build.sh
    ├── build.tcl
    ├── ip
    │   └── blink
    │       ├── component.xml
    │       ├── src
    │       │   └── blink.vhd
    │       └── xgui
    │           └── blink_v1_0.tcl
    └── src
        ├── bd
        │   └── design_1.tcl
        └── constraints
            └── constraints.xdc

8 directories, 7 files

#+end_src

You should be able to clone this repo elsewhere and regenerate the project with
#+begin_src sh
apn@aria:~/proj/snickerdoodle/blink-04-02-01/vivado$ vivado -mode batch -source build.tcl
#+end_src

This will create a project directory called "blink" (or whatever name it's given in the build.tcl script" in the vivado directory. This entire "blink" directory can be deleted and recreated with the blink.tcl script.


* Separately manage IP 

Arrange IP to be managed separately from projects in version control.

There's an example "blink ip" at the RIT RAVVENLAB site. This [[http://www.ritravvenlab.com/cpet-563-blog/create-blink-ip][tutorial]] walks through the process of packaging and creating a demo IP for blinking an LED. This is similar to the process for modifying an existing IP walked through in the [[https://www.xilinx.com/support/documentation/application_notes/xapp1165.pdf][Vivado VCS note]].

The first step is to create a directory somewhere that will be under version control. 

#+begin_src sh
mkdir $HOME/proj/snickerdoodle/myip
#+end_src

Initialize this is a git repository

#+begin_src sh
cd $HOME/proj/snickerdoodle/myip
git init
#+end_src

Create a directory for source code and then the specific IP

#+begin_src sh
mkdir $HOME/proj/snickerdoodle/myip/src
mkdir $HOME/proj/snickerdoodle/myip/src/blink
#+end_src

Copy the VHDL sources into the blink directory created above.

Run synthesis on the IP to make sure it builds correctly.

Generate a list of the files that must be stored in version control. Run the following TCL command

#+begin_src tcl
get_files -all
#+end_src

Add these files to the git project
#+begin_src sh
cd $HOME/proj/snickerdoodle/myip
git add blink/blink.vhd blink/component.xml
git commit -m"initial commit after vivado packaging"
#+end_src


* Project management
