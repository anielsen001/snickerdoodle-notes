#+TITLE: Version Control with Vivado

Would like to manage custom IP separately from the application. This seems trickier so I'll do that later.

TODO later: There are two pieces:
 - creating custom IP to be used in projects
 - creating projects to control boards or systems

* References:

http://www.fpgadeveloper.com/2014/08/version-control-for-vivado-projects.html

http://www.fpgadeveloper.com/2014/08/creating-a-custom-ip-block-in-vivado.html

Using Vivado Design Suite with Version Control Systems
https://www.xilinx.com/support/documentation/application_notes/xapp1165.pdf

Xilinx packaging IP basics
https://www.xilinx.com/support/documentation/sw_manuals/xilinx2017_2/ug1118-vivado-creating-packaging-custom-ip.pdf

Creating custom IP
http://blog.dev-flow.com/en/12-creating-a-custom-ip-in-vivado/

Creating new Blink IP
http://www.ritravvenlab.com/cpet-563-blog/create-blink-ip

http://adiuvoengineering.com/maximising-reuse-in-your-vivado-design/

* Version control IP and Application together

This [[http://www.fpgadeveloper.com/2014/08/version-control-for-vivado-projects.html][FPGADeveloper]] tutorial has a good start. I'll walk through creating the [[http://www.ritravvenlab.com/cpet-563.html][RIT RAVVEN Lab]] [[http://www.ritravvenlab.com/cpet-563-blog/february-03rd-2019][Blink Project]] using something like this method.



* Separately manage IP 

Arrange IP to be managed separately from projects in version control.

There's an example "blink ip" at the RIT RAVVENLAB site. This [[http://www.ritravvenlab.com/cpet-563-blog/create-blink-ip][tutorial]] walks through the process of packaging and creating a demo IP for blinking an LED. This is similar to the process for modifying an existing IP walked through in the [[https://www.xilinx.com/support/documentation/application_notes/xapp1165.pdf][Vivado VCS note]].

The first step is to create a directory somewhere that will be under version control. 

#+begin_src sh
mkdir $HOME/proj/snickerdoodle/myip
#+end_src

Initialize this is a git repository

#+begin_src sh
cd $HOME/proj/snickerdoodle/myip
git init
#+end_src

Create a directory for source code and then the specific IP

#+begin_src sh
mkdir $HOME/proj/snickerdoodle/myip/src
mkdir $HOME/proj/snickerdoodle/myip/src/blink
#+end_src

Copy the VHDL sources into the blink directory created above.

Run synthesis on the IP to make sure it builds correctly.

Generate a list of the files that must be stored in version control. Run the following TCL command

#+begin_src tcl
get_files -all
#+end_src

Add these files to the git project
#+begin_src sh
cd $HOME/proj/snickerdoodle/myip
git add blink/blink.vhd blink/component.xml
git commit -m"initial commit after vivado packaging"
#+end_src


* Project management
